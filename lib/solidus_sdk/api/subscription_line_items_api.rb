=begin
#solidus_subscriptions

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0-SNAPSHOT

=end

require 'cgi'

module SolidusSdk
  class SubscriptionLineItemsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete Subscription Line Item
    # 
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [SubscriptionLineItemOutput]
    def delete_subscriptions_api_v1_line_item_id(id, opts = {})
      data, _status_code, _headers = delete_subscriptions_api_v1_line_item_id_with_http_info(id, opts)
      data
    end

    # Delete Subscription Line Item
    # 
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubscriptionLineItemOutput, Integer, Hash)>] SubscriptionLineItemOutput data, response status code and response headers
    def delete_subscriptions_api_v1_line_item_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriptionLineItemsApi.delete_subscriptions_api_v1_line_item_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SubscriptionLineItemsApi.delete_subscriptions_api_v1_line_item_id"
      end
      # resource path
      local_var_path = '/subscriptions/api/v1/line_items/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SubscriptionLineItemOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SubscriptionLineItemsApi.delete_subscriptions_api_v1_line_item_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionLineItemsApi#delete_subscriptions_api_v1_line_item_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Subscription Line Item
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [PostApiOrdersOrderIdLineItemsRequest] :post_api_orders_order_id_line_items_request 
    # @return [SubscriptionLineItemOutput]
    def patch_subscriptions_api_v1_line_item_id(id, opts = {})
      data, _status_code, _headers = patch_subscriptions_api_v1_line_item_id_with_http_info(id, opts)
      data
    end

    # Update Subscription Line Item
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [PostApiOrdersOrderIdLineItemsRequest] :post_api_orders_order_id_line_items_request 
    # @return [Array<(SubscriptionLineItemOutput, Integer, Hash)>] SubscriptionLineItemOutput data, response status code and response headers
    def patch_subscriptions_api_v1_line_item_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriptionLineItemsApi.patch_subscriptions_api_v1_line_item_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SubscriptionLineItemsApi.patch_subscriptions_api_v1_line_item_id"
      end
      # resource path
      local_var_path = '/subscriptions/api/v1/line_items/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_api_orders_order_id_line_items_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'SubscriptionLineItemOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SubscriptionLineItemsApi.patch_subscriptions_api_v1_line_item_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionLineItemsApi#patch_subscriptions_api_v1_line_item_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Subscription Line Item
    # @param order_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [PostApiOrdersOrderIdLineItemsRequest] :post_api_orders_order_id_line_items_request 
    # @return [nil]
    def post_api_orders_order_id_line_items(order_id, opts = {})
      post_api_orders_order_id_line_items_with_http_info(order_id, opts)
      nil
    end

    # Create Subscription Line Item
    # @param order_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [PostApiOrdersOrderIdLineItemsRequest] :post_api_orders_order_id_line_items_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_api_orders_order_id_line_items_with_http_info(order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriptionLineItemsApi.post_api_orders_order_id_line_items ...'
      end
      # verify the required parameter 'order_id' is set
      if @api_client.config.client_side_validation && order_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_id' when calling SubscriptionLineItemsApi.post_api_orders_order_id_line_items"
      end
      # resource path
      local_var_path = '/api/orders/{order_id}/line_items'.sub('{' + 'order_id' + '}', CGI.escape(order_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_api_orders_order_id_line_items_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SubscriptionLineItemsApi.post_api_orders_order_id_line_items",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionLineItemsApi#post_api_orders_order_id_line_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
