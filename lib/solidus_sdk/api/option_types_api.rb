=begin
#Solidus API

#The standard Solidus API.

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0-SNAPSHOT

=end

require 'cgi'

module SolidusSdk
  class OptionTypesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create option type
    # Creates an option type.
    # @param [Hash] opts the optional parameters
    # @option opts [OptionTypeInput] :option_type_input 
    # @return [OptionType]
    def create_option_type(opts = {})
      data, _status_code, _headers = create_option_type_with_http_info(opts)
      data
    end

    # Create option type
    # Creates an option type.
    # @param [Hash] opts the optional parameters
    # @option opts [OptionTypeInput] :option_type_input 
    # @return [Array<(OptionType, Integer, Hash)>] OptionType data, response status code and response headers
    def create_option_type_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OptionTypesApi.create_option_type ...'
      end
      # resource path
      local_var_path = '/option_types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'option_type_input'])

      # return_type
      return_type = opts[:debug_return_type] || 'OptionType'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"OptionTypesApi.create_option_type",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OptionTypesApi#create_option_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete option type
    # Deletes an option type.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [OptionType]
    def delete_option_type(id, opts = {})
      data, _status_code, _headers = delete_option_type_with_http_info(id, opts)
      data
    end

    # Delete option type
    # Deletes an option type.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OptionType, Integer, Hash)>] OptionType data, response status code and response headers
    def delete_option_type_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OptionTypesApi.delete_option_type ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OptionTypesApi.delete_option_type"
      end
      # resource path
      local_var_path = '/option_types/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OptionType'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"OptionTypesApi.delete_option_type",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OptionTypesApi#delete_option_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get option type
    # Retrieve an option type.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [OptionType]
    def get_option_type(id, opts = {})
      data, _status_code, _headers = get_option_type_with_http_info(id, opts)
      data
    end

    # Get option type
    # Retrieve an option type.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OptionType, Integer, Hash)>] OptionType data, response status code and response headers
    def get_option_type_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OptionTypesApi.get_option_type ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OptionTypesApi.get_option_type"
      end
      # resource path
      local_var_path = '/option_types/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OptionType'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"OptionTypesApi.get_option_type",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OptionTypesApi#get_option_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List option types
    # Lists the system's option types.
    # @param [Hash] opts the optional parameters
    # @return [Array<OptionType>]
    def list_option_types(opts = {})
      data, _status_code, _headers = list_option_types_with_http_info(opts)
      data
    end

    # List option types
    # Lists the system&#39;s option types.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<OptionType>, Integer, Hash)>] Array<OptionType> data, response status code and response headers
    def list_option_types_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OptionTypesApi.list_option_types ...'
      end
      # resource path
      local_var_path = '/option_types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<OptionType>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"OptionTypesApi.list_option_types",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OptionTypesApi#list_option_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update option type
    # Updates an option type.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [OptionType] :option_type 
    # @return [OptionType]
    def update_option_type(id, opts = {})
      data, _status_code, _headers = update_option_type_with_http_info(id, opts)
      data
    end

    # Update option type
    # Updates an option type.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [OptionType] :option_type 
    # @return [Array<(OptionType, Integer, Hash)>] OptionType data, response status code and response headers
    def update_option_type_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OptionTypesApi.update_option_type ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OptionTypesApi.update_option_type"
      end
      # resource path
      local_var_path = '/option_types/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'option_type'])

      # return_type
      return_type = opts[:debug_return_type] || 'OptionType'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"OptionTypesApi.update_option_type",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OptionTypesApi#update_option_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
