=begin
#Solidus API

#The standard Solidus API.

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0-SNAPSHOT

=end

require 'cgi'

module SolidusSdk
  class StatesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get country state
    # Retrieves a country's state.
    # @param country_id [String] 
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [State]
    def get_country_state(country_id, id, opts = {})
      data, _status_code, _headers = get_country_state_with_http_info(country_id, id, opts)
      data
    end

    # Get country state
    # Retrieves a country&#39;s state.
    # @param country_id [String] 
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(State, Integer, Hash)>] State data, response status code and response headers
    def get_country_state_with_http_info(country_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatesApi.get_country_state ...'
      end
      # verify the required parameter 'country_id' is set
      if @api_client.config.client_side_validation && country_id.nil?
        fail ArgumentError, "Missing the required parameter 'country_id' when calling StatesApi.get_country_state"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StatesApi.get_country_state"
      end
      # resource path
      local_var_path = '/countries/{country_id}/states/{id}'.sub('{' + 'country_id' + '}', CGI.escape(country_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'State'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"StatesApi.get_country_state",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatesApi#get_country_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get state
    # Retrieves a state.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [State]
    def get_state(id, opts = {})
      data, _status_code, _headers = get_state_with_http_info(id, opts)
      data
    end

    # Get state
    # Retrieves a state.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(State, Integer, Hash)>] State data, response status code and response headers
    def get_state_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatesApi.get_state ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StatesApi.get_state"
      end
      # resource path
      local_var_path = '/states/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'State'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"StatesApi.get_state",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatesApi#get_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List country states
    # Retrieves a country's states.
    # @param country_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ListCountryStates200Response]
    def list_country_states(country_id, opts = {})
      data, _status_code, _headers = list_country_states_with_http_info(country_id, opts)
      data
    end

    # List country states
    # Retrieves a country&#39;s states.
    # @param country_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListCountryStates200Response, Integer, Hash)>] ListCountryStates200Response data, response status code and response headers
    def list_country_states_with_http_info(country_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatesApi.list_country_states ...'
      end
      # verify the required parameter 'country_id' is set
      if @api_client.config.client_side_validation && country_id.nil?
        fail ArgumentError, "Missing the required parameter 'country_id' when calling StatesApi.list_country_states"
      end
      # resource path
      local_var_path = '/countries/{country_id}/states'.sub('{' + 'country_id' + '}', CGI.escape(country_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListCountryStates200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"StatesApi.list_country_states",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatesApi#list_country_states\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List states
    # Lists all states in the system.
    # @param [Hash] opts the optional parameters
    # @return [ListStates200Response]
    def list_states(opts = {})
      data, _status_code, _headers = list_states_with_http_info(opts)
      data
    end

    # List states
    # Lists all states in the system.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListStates200Response, Integer, Hash)>] ListStates200Response data, response status code and response headers
    def list_states_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatesApi.list_states ...'
      end
      # resource path
      local_var_path = '/states'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListStates200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"StatesApi.list_states",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatesApi#list_states\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
