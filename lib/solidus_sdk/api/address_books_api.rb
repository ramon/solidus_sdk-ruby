=begin
#Solidus API

#The standard Solidus API.

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0-SNAPSHOT

=end

require 'cgi'

module SolidusSdk
  class AddressBooksApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get user address book
    # Retrieves a user's address book.
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<AddressBookInner>]
    def get_user_address_book(user_id, opts = {})
      data, _status_code, _headers = get_user_address_book_with_http_info(user_id, opts)
      data
    end

    # Get user address book
    # Retrieves a user&#39;s address book.
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AddressBookInner>, Integer, Hash)>] Array<AddressBookInner> data, response status code and response headers
    def get_user_address_book_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddressBooksApi.get_user_address_book ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AddressBooksApi.get_user_address_book"
      end
      # resource path
      local_var_path = '/users/{user_id}/address_book'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AddressBookInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"AddressBooksApi.get_user_address_book",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddressBooksApi#get_user_address_book\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove address from user address book
    # Removes an address from a user's address book.  **Note:** Rather than delete a `Spree::UserAddress` record this action set its `archived` attribute to `true`.
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :address_id 
    # @return [Array<AddressBookInner>]
    def remove_address_from_user_address_book(user_id, opts = {})
      data, _status_code, _headers = remove_address_from_user_address_book_with_http_info(user_id, opts)
      data
    end

    # Remove address from user address book
    # Removes an address from a user&#39;s address book.  **Note:** Rather than delete a &#x60;Spree::UserAddress&#x60; record this action set its &#x60;archived&#x60; attribute to &#x60;true&#x60;.
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :address_id 
    # @return [Array<(Array<AddressBookInner>, Integer, Hash)>] Array<AddressBookInner> data, response status code and response headers
    def remove_address_from_user_address_book_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddressBooksApi.remove_address_from_user_address_book ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AddressBooksApi.remove_address_from_user_address_book"
      end
      # resource path
      local_var_path = '/users/{user_id}/address_book'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'address_id'] = opts[:'address_id'] if !opts[:'address_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AddressBookInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"AddressBooksApi.remove_address_from_user_address_book",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddressBooksApi#remove_address_from_user_address_book\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update user address book
    # Updates a user's address book.  **Note:** if the passed `id` matches an existing `address` a new `Spree::Address` record will be created and the matched `address` `archived` on `Spree::UserAddress`. For a similar logic, if the passed `id` matches an existing `address` which is in `archived` state, the `Spree::UserAddress#archived` record will be restored to `false`. See `user_address_book.rb` for further information.
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [AddressBookInput] :address_book_input 
    # @return [Array<AddressBookInner>]
    def update_user_address_book(user_id, opts = {})
      data, _status_code, _headers = update_user_address_book_with_http_info(user_id, opts)
      data
    end

    # Update user address book
    # Updates a user&#39;s address book.  **Note:** if the passed &#x60;id&#x60; matches an existing &#x60;address&#x60; a new &#x60;Spree::Address&#x60; record will be created and the matched &#x60;address&#x60; &#x60;archived&#x60; on &#x60;Spree::UserAddress&#x60;. For a similar logic, if the passed &#x60;id&#x60; matches an existing &#x60;address&#x60; which is in &#x60;archived&#x60; state, the &#x60;Spree::UserAddress#archived&#x60; record will be restored to &#x60;false&#x60;. See &#x60;user_address_book.rb&#x60; for further information.
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [AddressBookInput] :address_book_input 
    # @return [Array<(Array<AddressBookInner>, Integer, Hash)>] Array<AddressBookInner> data, response status code and response headers
    def update_user_address_book_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddressBooksApi.update_user_address_book ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AddressBooksApi.update_user_address_book"
      end
      # resource path
      local_var_path = '/users/{user_id}/address_book'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'address_book_input'])

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AddressBookInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"AddressBooksApi.update_user_address_book",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddressBooksApi#update_user_address_book\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
