=begin
#Solidus API

#The standard Solidus API.

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0-SNAPSHOT

=end

require 'cgi'

module SolidusSdk
  class AddressesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get checkout address
    # Retrieves a checkout's address.
    # @param checkout_id [String] The order number
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Address]
    def get_checkout_address(checkout_id, id, opts = {})
      data, _status_code, _headers = get_checkout_address_with_http_info(checkout_id, id, opts)
      data
    end

    # Get checkout address
    # Retrieves a checkout&#39;s address.
    # @param checkout_id [String] The order number
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Address, Integer, Hash)>] Address data, response status code and response headers
    def get_checkout_address_with_http_info(checkout_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddressesApi.get_checkout_address ...'
      end
      # verify the required parameter 'checkout_id' is set
      if @api_client.config.client_side_validation && checkout_id.nil?
        fail ArgumentError, "Missing the required parameter 'checkout_id' when calling AddressesApi.get_checkout_address"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AddressesApi.get_checkout_address"
      end
      # resource path
      local_var_path = '/checkouts/{checkout_id}/addresses/{id}'.sub('{' + 'checkout_id' + '}', CGI.escape(checkout_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Address'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'order-token']

      new_options = opts.merge(
        :operation => :"AddressesApi.get_checkout_address",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddressesApi#get_checkout_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get order address
    # Retrieves an order's address.
    # @param order_number [String] The order number
    # @param id [String] The id of the order&#39;s address that we want to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Address]
    def get_order_address(order_number, id, opts = {})
      data, _status_code, _headers = get_order_address_with_http_info(order_number, id, opts)
      data
    end

    # Get order address
    # Retrieves an order&#39;s address.
    # @param order_number [String] The order number
    # @param id [String] The id of the order&#39;s address that we want to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(Address, Integer, Hash)>] Address data, response status code and response headers
    def get_order_address_with_http_info(order_number, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddressesApi.get_order_address ...'
      end
      # verify the required parameter 'order_number' is set
      if @api_client.config.client_side_validation && order_number.nil?
        fail ArgumentError, "Missing the required parameter 'order_number' when calling AddressesApi.get_order_address"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AddressesApi.get_order_address"
      end
      # resource path
      local_var_path = '/orders/{order_number}/addresses/{id}'.sub('{' + 'order_number' + '}', CGI.escape(order_number.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Address'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'order-token']

      new_options = opts.merge(
        :operation => :"AddressesApi.get_order_address",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddressesApi#get_order_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update checkout address
    # Updates a checkout's address.
    # @param checkout_id [String] The order number
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateCheckoutAddressRequest] :update_checkout_address_request 
    # @return [Address]
    def update_checkout_address(checkout_id, id, opts = {})
      data, _status_code, _headers = update_checkout_address_with_http_info(checkout_id, id, opts)
      data
    end

    # Update checkout address
    # Updates a checkout&#39;s address.
    # @param checkout_id [String] The order number
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateCheckoutAddressRequest] :update_checkout_address_request 
    # @return [Array<(Address, Integer, Hash)>] Address data, response status code and response headers
    def update_checkout_address_with_http_info(checkout_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddressesApi.update_checkout_address ...'
      end
      # verify the required parameter 'checkout_id' is set
      if @api_client.config.client_side_validation && checkout_id.nil?
        fail ArgumentError, "Missing the required parameter 'checkout_id' when calling AddressesApi.update_checkout_address"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AddressesApi.update_checkout_address"
      end
      # resource path
      local_var_path = '/checkouts/{checkout_id}/addresses/{id}'.sub('{' + 'checkout_id' + '}', CGI.escape(checkout_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_checkout_address_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Address'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'order-token']

      new_options = opts.merge(
        :operation => :"AddressesApi.update_checkout_address",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddressesApi#update_checkout_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update order address
    # Updates an order's address.
    # @param order_number [String] The order number
    # @param id [String] The id of the order&#39;s address that we want to retrieve
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateCheckoutAddressRequest] :update_checkout_address_request 
    # @return [Address]
    def update_order_address(order_number, id, opts = {})
      data, _status_code, _headers = update_order_address_with_http_info(order_number, id, opts)
      data
    end

    # Update order address
    # Updates an order&#39;s address.
    # @param order_number [String] The order number
    # @param id [String] The id of the order&#39;s address that we want to retrieve
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateCheckoutAddressRequest] :update_checkout_address_request 
    # @return [Array<(Address, Integer, Hash)>] Address data, response status code and response headers
    def update_order_address_with_http_info(order_number, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddressesApi.update_order_address ...'
      end
      # verify the required parameter 'order_number' is set
      if @api_client.config.client_side_validation && order_number.nil?
        fail ArgumentError, "Missing the required parameter 'order_number' when calling AddressesApi.update_order_address"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AddressesApi.update_order_address"
      end
      # resource path
      local_var_path = '/orders/{order_number}/addresses/{id}'.sub('{' + 'order_number' + '}', CGI.escape(order_number.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_checkout_address_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Address'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'order-token']

      new_options = opts.merge(
        :operation => :"AddressesApi.update_order_address",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddressesApi#update_order_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
