=begin
#Solidus API

#The standard Solidus API.

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0-SNAPSHOT

=end

require 'cgi'

module SolidusSdk
  class ZonesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create zone
    # Creates a zone.  Only users with the `create` permission on `Spree::Zone` can perform this action.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateZoneRequest] :create_zone_request 
    # @return [Zone]
    def create_zone(opts = {})
      data, _status_code, _headers = create_zone_with_http_info(opts)
      data
    end

    # Create zone
    # Creates a zone.  Only users with the &#x60;create&#x60; permission on &#x60;Spree::Zone&#x60; can perform this action.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateZoneRequest] :create_zone_request 
    # @return [Array<(Zone, Integer, Hash)>] Zone data, response status code and response headers
    def create_zone_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ZonesApi.create_zone ...'
      end
      # resource path
      local_var_path = '/zones'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_zone_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Zone'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"ZonesApi.create_zone",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZonesApi#create_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete zone
    # Deletes a zone.
    # @param id [String] The ID of the zone we want to update
    # @param [Hash] opts the optional parameters
    # @return [Zone]
    def delete_zone(id, opts = {})
      data, _status_code, _headers = delete_zone_with_http_info(id, opts)
      data
    end

    # Delete zone
    # Deletes a zone.
    # @param id [String] The ID of the zone we want to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(Zone, Integer, Hash)>] Zone data, response status code and response headers
    def delete_zone_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ZonesApi.delete_zone ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ZonesApi.delete_zone"
      end
      # resource path
      local_var_path = '/zones/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Zone'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"ZonesApi.delete_zone",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZonesApi#delete_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get zone
    # Retrieves a zone.
    # @param id [String] The ID of the zone we want to update
    # @param [Hash] opts the optional parameters
    # @return [Zone]
    def get_zone(id, opts = {})
      data, _status_code, _headers = get_zone_with_http_info(id, opts)
      data
    end

    # Get zone
    # Retrieves a zone.
    # @param id [String] The ID of the zone we want to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(Zone, Integer, Hash)>] Zone data, response status code and response headers
    def get_zone_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ZonesApi.get_zone ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ZonesApi.get_zone"
      end
      # resource path
      local_var_path = '/zones/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Zone'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"ZonesApi.get_zone",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZonesApi#get_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List zones
    # Lists all zones.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 1)
    # @option opts [Integer] :per_page  (default to 25)
    # @option opts [Object] :q Allows to query results based on search filters provided by Ransack (https://github.com/activerecord-hackery/ransack/).
    # @return [ListZones200Response]
    def list_zones(opts = {})
      data, _status_code, _headers = list_zones_with_http_info(opts)
      data
    end

    # List zones
    # Lists all zones.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 1)
    # @option opts [Integer] :per_page  (default to 25)
    # @option opts [Object] :q Allows to query results based on search filters provided by Ransack (https://github.com/activerecord-hackery/ransack/).
    # @return [Array<(ListZones200Response, Integer, Hash)>] ListZones200Response data, response status code and response headers
    def list_zones_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ZonesApi.list_zones ...'
      end
      # resource path
      local_var_path = '/zones'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListZones200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"ZonesApi.list_zones",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZonesApi#list_zones\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update zone
    # Updates a zone.  Only users with the `update` permission on the zone can perform this action.
    # @param id [String] The ID of the zone we want to update
    # @param [Hash] opts the optional parameters
    # @option opts [CreateZoneRequest] :create_zone_request 
    # @return [Zone]
    def update_zone(id, opts = {})
      data, _status_code, _headers = update_zone_with_http_info(id, opts)
      data
    end

    # Update zone
    # Updates a zone.  Only users with the &#x60;update&#x60; permission on the zone can perform this action.
    # @param id [String] The ID of the zone we want to update
    # @param [Hash] opts the optional parameters
    # @option opts [CreateZoneRequest] :create_zone_request 
    # @return [Array<(Zone, Integer, Hash)>] Zone data, response status code and response headers
    def update_zone_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ZonesApi.update_zone ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ZonesApi.update_zone"
      end
      # resource path
      local_var_path = '/zones/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_zone_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Zone'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"ZonesApi.update_zone",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZonesApi#update_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
