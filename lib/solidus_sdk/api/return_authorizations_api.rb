=begin
#Solidus API

#The standard Solidus API.

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0-SNAPSHOT

=end

require 'cgi'

module SolidusSdk
  class ReturnAuthorizationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Cancel checkout return authorization
    # Cancels a checkout's return authorization.
    # @param checkout_id [String] The order number
    # @param return_authorization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def cancel_checkout_return_authorization(checkout_id, return_authorization_id, opts = {})
      data, _status_code, _headers = cancel_checkout_return_authorization_with_http_info(checkout_id, return_authorization_id, opts)
      data
    end

    # Cancel checkout return authorization
    # Cancels a checkout&#39;s return authorization.
    # @param checkout_id [String] The order number
    # @param return_authorization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def cancel_checkout_return_authorization_with_http_info(checkout_id, return_authorization_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReturnAuthorizationsApi.cancel_checkout_return_authorization ...'
      end
      # verify the required parameter 'checkout_id' is set
      if @api_client.config.client_side_validation && checkout_id.nil?
        fail ArgumentError, "Missing the required parameter 'checkout_id' when calling ReturnAuthorizationsApi.cancel_checkout_return_authorization"
      end
      # verify the required parameter 'return_authorization_id' is set
      if @api_client.config.client_side_validation && return_authorization_id.nil?
        fail ArgumentError, "Missing the required parameter 'return_authorization_id' when calling ReturnAuthorizationsApi.cancel_checkout_return_authorization"
      end
      # resource path
      local_var_path = '/checkouts/{checkout_id}/return_authorizations/{return_authorization_id}/cancel'.sub('{' + 'checkout_id' + '}', CGI.escape(checkout_id.to_s)).sub('{' + 'return_authorization_id' + '}', CGI.escape(return_authorization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"ReturnAuthorizationsApi.cancel_checkout_return_authorization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReturnAuthorizationsApi#cancel_checkout_return_authorization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel order return authorization
    # Cancels an order's return authorization.
    # @param order_number [String] 
    # @param return_authorization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def cancel_order_return_authorization(order_number, return_authorization_id, opts = {})
      data, _status_code, _headers = cancel_order_return_authorization_with_http_info(order_number, return_authorization_id, opts)
      data
    end

    # Cancel order return authorization
    # Cancels an order&#39;s return authorization.
    # @param order_number [String] 
    # @param return_authorization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def cancel_order_return_authorization_with_http_info(order_number, return_authorization_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReturnAuthorizationsApi.cancel_order_return_authorization ...'
      end
      # verify the required parameter 'order_number' is set
      if @api_client.config.client_side_validation && order_number.nil?
        fail ArgumentError, "Missing the required parameter 'order_number' when calling ReturnAuthorizationsApi.cancel_order_return_authorization"
      end
      # verify the required parameter 'return_authorization_id' is set
      if @api_client.config.client_side_validation && return_authorization_id.nil?
        fail ArgumentError, "Missing the required parameter 'return_authorization_id' when calling ReturnAuthorizationsApi.cancel_order_return_authorization"
      end
      # resource path
      local_var_path = '/orders/{order_number}/return_authorizations/{return_authorization_id}/cancel'.sub('{' + 'order_number' + '}', CGI.escape(order_number.to_s)).sub('{' + 'return_authorization_id' + '}', CGI.escape(return_authorization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"ReturnAuthorizationsApi.cancel_order_return_authorization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReturnAuthorizationsApi#cancel_order_return_authorization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create checkout return authorization
    # Creates a return authorization for a checkout.  Only users with the `create` permission on `Spree::RetrunAuthorization` can perform this action.
    # @param checkout_id [String] The order number
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCheckoutReturnAuthorizationRequest] :create_checkout_return_authorization_request 
    # @return [Object]
    def create_checkout_return_authorization(checkout_id, opts = {})
      data, _status_code, _headers = create_checkout_return_authorization_with_http_info(checkout_id, opts)
      data
    end

    # Create checkout return authorization
    # Creates a return authorization for a checkout.  Only users with the &#x60;create&#x60; permission on &#x60;Spree::RetrunAuthorization&#x60; can perform this action.
    # @param checkout_id [String] The order number
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCheckoutReturnAuthorizationRequest] :create_checkout_return_authorization_request 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def create_checkout_return_authorization_with_http_info(checkout_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReturnAuthorizationsApi.create_checkout_return_authorization ...'
      end
      # verify the required parameter 'checkout_id' is set
      if @api_client.config.client_side_validation && checkout_id.nil?
        fail ArgumentError, "Missing the required parameter 'checkout_id' when calling ReturnAuthorizationsApi.create_checkout_return_authorization"
      end
      # resource path
      local_var_path = '/checkouts/{checkout_id}/return_authorizations'.sub('{' + 'checkout_id' + '}', CGI.escape(checkout_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_checkout_return_authorization_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"ReturnAuthorizationsApi.create_checkout_return_authorization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReturnAuthorizationsApi#create_checkout_return_authorization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create order return authorization
    # Creates a return authorization for an order.  Only users with the `create` permission on `Spree::ReturnAuthorization` can perform this action.
    # @param order_number [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCheckoutReturnAuthorizationRequest] :create_checkout_return_authorization_request 
    # @return [Object]
    def create_order_return_authorization(order_number, opts = {})
      data, _status_code, _headers = create_order_return_authorization_with_http_info(order_number, opts)
      data
    end

    # Create order return authorization
    # Creates a return authorization for an order.  Only users with the &#x60;create&#x60; permission on &#x60;Spree::ReturnAuthorization&#x60; can perform this action.
    # @param order_number [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCheckoutReturnAuthorizationRequest] :create_checkout_return_authorization_request 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def create_order_return_authorization_with_http_info(order_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReturnAuthorizationsApi.create_order_return_authorization ...'
      end
      # verify the required parameter 'order_number' is set
      if @api_client.config.client_side_validation && order_number.nil?
        fail ArgumentError, "Missing the required parameter 'order_number' when calling ReturnAuthorizationsApi.create_order_return_authorization"
      end
      # resource path
      local_var_path = '/orders/{order_number}/return_authorizations'.sub('{' + 'order_number' + '}', CGI.escape(order_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_checkout_return_authorization_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"ReturnAuthorizationsApi.create_order_return_authorization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReturnAuthorizationsApi#create_order_return_authorization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete checkout return authorization
    # Deletes a checkout's return authorization.
    # @param checkout_id [String] The order number
    # @param id [String] The ID of the Spree::ReturnAuthorization
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_checkout_return_authorization(checkout_id, id, opts = {})
      data, _status_code, _headers = delete_checkout_return_authorization_with_http_info(checkout_id, id, opts)
      data
    end

    # Delete checkout return authorization
    # Deletes a checkout&#39;s return authorization.
    # @param checkout_id [String] The order number
    # @param id [String] The ID of the Spree::ReturnAuthorization
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_checkout_return_authorization_with_http_info(checkout_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReturnAuthorizationsApi.delete_checkout_return_authorization ...'
      end
      # verify the required parameter 'checkout_id' is set
      if @api_client.config.client_side_validation && checkout_id.nil?
        fail ArgumentError, "Missing the required parameter 'checkout_id' when calling ReturnAuthorizationsApi.delete_checkout_return_authorization"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ReturnAuthorizationsApi.delete_checkout_return_authorization"
      end
      # resource path
      local_var_path = '/checkouts/{checkout_id}/return_authorizations/{id}'.sub('{' + 'checkout_id' + '}', CGI.escape(checkout_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"ReturnAuthorizationsApi.delete_checkout_return_authorization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReturnAuthorizationsApi#delete_checkout_return_authorization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete order return authorization
    # Deletes an order's return authorization.
    # @param order_number [String] The Order number
    # @param id [String] The ID of the Spree::ReturnAuthorization
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_order_return_authorization(order_number, id, opts = {})
      data, _status_code, _headers = delete_order_return_authorization_with_http_info(order_number, id, opts)
      data
    end

    # Delete order return authorization
    # Deletes an order&#39;s return authorization.
    # @param order_number [String] The Order number
    # @param id [String] The ID of the Spree::ReturnAuthorization
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_order_return_authorization_with_http_info(order_number, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReturnAuthorizationsApi.delete_order_return_authorization ...'
      end
      # verify the required parameter 'order_number' is set
      if @api_client.config.client_side_validation && order_number.nil?
        fail ArgumentError, "Missing the required parameter 'order_number' when calling ReturnAuthorizationsApi.delete_order_return_authorization"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ReturnAuthorizationsApi.delete_order_return_authorization"
      end
      # resource path
      local_var_path = '/orders/{order_number}/return_authorizations/{id}'.sub('{' + 'order_number' + '}', CGI.escape(order_number.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"ReturnAuthorizationsApi.delete_order_return_authorization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReturnAuthorizationsApi#delete_order_return_authorization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get checkout return authorization
    # Gets a checkout's return authorization.
    # @param checkout_id [String] The order number
    # @param id [String] The ID of the Spree::ReturnAuthorization
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_checkout_return_authorization(checkout_id, id, opts = {})
      data, _status_code, _headers = get_checkout_return_authorization_with_http_info(checkout_id, id, opts)
      data
    end

    # Get checkout return authorization
    # Gets a checkout&#39;s return authorization.
    # @param checkout_id [String] The order number
    # @param id [String] The ID of the Spree::ReturnAuthorization
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_checkout_return_authorization_with_http_info(checkout_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReturnAuthorizationsApi.get_checkout_return_authorization ...'
      end
      # verify the required parameter 'checkout_id' is set
      if @api_client.config.client_side_validation && checkout_id.nil?
        fail ArgumentError, "Missing the required parameter 'checkout_id' when calling ReturnAuthorizationsApi.get_checkout_return_authorization"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ReturnAuthorizationsApi.get_checkout_return_authorization"
      end
      # resource path
      local_var_path = '/checkouts/{checkout_id}/return_authorizations/{id}'.sub('{' + 'checkout_id' + '}', CGI.escape(checkout_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"ReturnAuthorizationsApi.get_checkout_return_authorization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReturnAuthorizationsApi#get_checkout_return_authorization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get order return authorization
    # Retrieves an order's return authorization.
    # @param order_number [String] The Order number
    # @param id [String] The ID of the Spree::ReturnAuthorization
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_order_return_authorization(order_number, id, opts = {})
      data, _status_code, _headers = get_order_return_authorization_with_http_info(order_number, id, opts)
      data
    end

    # Get order return authorization
    # Retrieves an order&#39;s return authorization.
    # @param order_number [String] The Order number
    # @param id [String] The ID of the Spree::ReturnAuthorization
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_order_return_authorization_with_http_info(order_number, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReturnAuthorizationsApi.get_order_return_authorization ...'
      end
      # verify the required parameter 'order_number' is set
      if @api_client.config.client_side_validation && order_number.nil?
        fail ArgumentError, "Missing the required parameter 'order_number' when calling ReturnAuthorizationsApi.get_order_return_authorization"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ReturnAuthorizationsApi.get_order_return_authorization"
      end
      # resource path
      local_var_path = '/orders/{order_number}/return_authorizations/{id}'.sub('{' + 'order_number' + '}', CGI.escape(order_number.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"ReturnAuthorizationsApi.get_order_return_authorization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReturnAuthorizationsApi#get_order_return_authorization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List checkout return authorizations
    # Lists a checkout's return authorizations.
    # @param checkout_id [String] The order number
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 1)
    # @option opts [Integer] :per_page  (default to 25)
    # @option opts [Object] :q Allows to query results based on search filters provided by Ransack (https://github.com/activerecord-hackery/ransack/).
    # @return [ListCheckoutReturnAuthorization200Response]
    def list_checkout_return_authorization(checkout_id, opts = {})
      data, _status_code, _headers = list_checkout_return_authorization_with_http_info(checkout_id, opts)
      data
    end

    # List checkout return authorizations
    # Lists a checkout&#39;s return authorizations.
    # @param checkout_id [String] The order number
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 1)
    # @option opts [Integer] :per_page  (default to 25)
    # @option opts [Object] :q Allows to query results based on search filters provided by Ransack (https://github.com/activerecord-hackery/ransack/).
    # @return [Array<(ListCheckoutReturnAuthorization200Response, Integer, Hash)>] ListCheckoutReturnAuthorization200Response data, response status code and response headers
    def list_checkout_return_authorization_with_http_info(checkout_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReturnAuthorizationsApi.list_checkout_return_authorization ...'
      end
      # verify the required parameter 'checkout_id' is set
      if @api_client.config.client_side_validation && checkout_id.nil?
        fail ArgumentError, "Missing the required parameter 'checkout_id' when calling ReturnAuthorizationsApi.list_checkout_return_authorization"
      end
      # resource path
      local_var_path = '/checkouts/{checkout_id}/return_authorizations'.sub('{' + 'checkout_id' + '}', CGI.escape(checkout_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListCheckoutReturnAuthorization200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"ReturnAuthorizationsApi.list_checkout_return_authorization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReturnAuthorizationsApi#list_checkout_return_authorization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List order return authorizations
    # Lists an order's return authorizations.
    # @param order_number [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 1)
    # @option opts [Integer] :per_page  (default to 25)
    # @option opts [Object] :q Allows to query results based on search filters provided by Ransack (https://github.com/activerecord-hackery/ransack/).
    # @return [ListCheckoutReturnAuthorization200Response]
    def list_order_return_authorizations(order_number, opts = {})
      data, _status_code, _headers = list_order_return_authorizations_with_http_info(order_number, opts)
      data
    end

    # List order return authorizations
    # Lists an order&#39;s return authorizations.
    # @param order_number [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 1)
    # @option opts [Integer] :per_page  (default to 25)
    # @option opts [Object] :q Allows to query results based on search filters provided by Ransack (https://github.com/activerecord-hackery/ransack/).
    # @return [Array<(ListCheckoutReturnAuthorization200Response, Integer, Hash)>] ListCheckoutReturnAuthorization200Response data, response status code and response headers
    def list_order_return_authorizations_with_http_info(order_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReturnAuthorizationsApi.list_order_return_authorizations ...'
      end
      # verify the required parameter 'order_number' is set
      if @api_client.config.client_side_validation && order_number.nil?
        fail ArgumentError, "Missing the required parameter 'order_number' when calling ReturnAuthorizationsApi.list_order_return_authorizations"
      end
      # resource path
      local_var_path = '/orders/{order_number}/return_authorizations'.sub('{' + 'order_number' + '}', CGI.escape(order_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListCheckoutReturnAuthorization200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"ReturnAuthorizationsApi.list_order_return_authorizations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReturnAuthorizationsApi#list_order_return_authorizations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update checkout return authorization
    # Updates a checkout's return authorization.  Only users with the `update` permission on the return authorization can perform this action.
    # @param checkout_id [String] The order number
    # @param id [String] The ID of the Spree::ReturnAuthorization
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCheckoutReturnAuthorizationRequest] :create_checkout_return_authorization_request 
    # @return [Object]
    def update_checkout_return_authorization(checkout_id, id, opts = {})
      data, _status_code, _headers = update_checkout_return_authorization_with_http_info(checkout_id, id, opts)
      data
    end

    # Update checkout return authorization
    # Updates a checkout&#39;s return authorization.  Only users with the &#x60;update&#x60; permission on the return authorization can perform this action.
    # @param checkout_id [String] The order number
    # @param id [String] The ID of the Spree::ReturnAuthorization
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCheckoutReturnAuthorizationRequest] :create_checkout_return_authorization_request 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def update_checkout_return_authorization_with_http_info(checkout_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReturnAuthorizationsApi.update_checkout_return_authorization ...'
      end
      # verify the required parameter 'checkout_id' is set
      if @api_client.config.client_side_validation && checkout_id.nil?
        fail ArgumentError, "Missing the required parameter 'checkout_id' when calling ReturnAuthorizationsApi.update_checkout_return_authorization"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ReturnAuthorizationsApi.update_checkout_return_authorization"
      end
      # resource path
      local_var_path = '/checkouts/{checkout_id}/return_authorizations/{id}'.sub('{' + 'checkout_id' + '}', CGI.escape(checkout_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_checkout_return_authorization_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"ReturnAuthorizationsApi.update_checkout_return_authorization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReturnAuthorizationsApi#update_checkout_return_authorization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update order return authorization
    # Updates an order's return authorization.  Only users with the `update` permission on the return authorization can perform this action.
    # @param order_number [String] The Order number
    # @param id [String] The ID of the Spree::ReturnAuthorization
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCheckoutReturnAuthorizationRequest] :create_checkout_return_authorization_request 
    # @return [Object]
    def update_order_return_authorization(order_number, id, opts = {})
      data, _status_code, _headers = update_order_return_authorization_with_http_info(order_number, id, opts)
      data
    end

    # Update order return authorization
    # Updates an order&#39;s return authorization.  Only users with the &#x60;update&#x60; permission on the return authorization can perform this action.
    # @param order_number [String] The Order number
    # @param id [String] The ID of the Spree::ReturnAuthorization
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCheckoutReturnAuthorizationRequest] :create_checkout_return_authorization_request 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def update_order_return_authorization_with_http_info(order_number, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReturnAuthorizationsApi.update_order_return_authorization ...'
      end
      # verify the required parameter 'order_number' is set
      if @api_client.config.client_side_validation && order_number.nil?
        fail ArgumentError, "Missing the required parameter 'order_number' when calling ReturnAuthorizationsApi.update_order_return_authorization"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ReturnAuthorizationsApi.update_order_return_authorization"
      end
      # resource path
      local_var_path = '/orders/{order_number}/return_authorizations/{id}'.sub('{' + 'order_number' + '}', CGI.escape(order_number.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_checkout_return_authorization_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"ReturnAuthorizationsApi.update_order_return_authorization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReturnAuthorizationsApi#update_order_return_authorization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
