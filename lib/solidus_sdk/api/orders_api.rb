=begin
#Solidus API

#The standard Solidus API.

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0-SNAPSHOT

=end

require 'cgi'

module SolidusSdk
  class OrdersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Cancel order
    # Cancels an order.
    # @param order_number [String] 
    # @param [Hash] opts the optional parameters
    # @return [OrderBig]
    def cancel_order(order_number, opts = {})
      data, _status_code, _headers = cancel_order_with_http_info(order_number, opts)
      data
    end

    # Cancel order
    # Cancels an order.
    # @param order_number [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderBig, Integer, Hash)>] OrderBig data, response status code and response headers
    def cancel_order_with_http_info(order_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrdersApi.cancel_order ...'
      end
      # verify the required parameter 'order_number' is set
      if @api_client.config.client_side_validation && order_number.nil?
        fail ArgumentError, "Missing the required parameter 'order_number' when calling OrdersApi.cancel_order"
      end
      # resource path
      local_var_path = '/orders/{order_number}/cancel'.sub('{' + 'order_number' + '}', CGI.escape(order_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrderBig'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'order-token']

      new_options = opts.merge(
        :operation => :"OrdersApi.cancel_order",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrdersApi#cancel_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create order
    # Creates a new order.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateOrderRequest] :update_order_request 
    # @return [OrderBig]
    def create_order(opts = {})
      data, _status_code, _headers = create_order_with_http_info(opts)
      data
    end

    # Create order
    # Creates a new order.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateOrderRequest] :update_order_request 
    # @return [Array<(OrderBig, Integer, Hash)>] OrderBig data, response status code and response headers
    def create_order_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrdersApi.create_order ...'
      end
      # resource path
      local_var_path = '/orders'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_order_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'OrderBig'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"OrdersApi.create_order",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrdersApi#create_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Empty order
    # Empties an order's cart.
    # @param order_number [String] 
    # @param [Hash] opts the optional parameters
    # @return [OrderBig]
    def empty_order(order_number, opts = {})
      data, _status_code, _headers = empty_order_with_http_info(order_number, opts)
      data
    end

    # Empty order
    # Empties an order&#39;s cart.
    # @param order_number [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderBig, Integer, Hash)>] OrderBig data, response status code and response headers
    def empty_order_with_http_info(order_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrdersApi.empty_order ...'
      end
      # verify the required parameter 'order_number' is set
      if @api_client.config.client_side_validation && order_number.nil?
        fail ArgumentError, "Missing the required parameter 'order_number' when calling OrdersApi.empty_order"
      end
      # resource path
      local_var_path = '/orders/{order_number}/empty'.sub('{' + 'order_number' + '}', CGI.escape(order_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrderBig'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'order-token']

      new_options = opts.merge(
        :operation => :"OrdersApi.empty_order",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrdersApi#empty_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get current order
    # Retrieves the user's current order.
    # @param [Hash] opts the optional parameters
    # @return [OrderBig]
    def get_current_order(opts = {})
      data, _status_code, _headers = get_current_order_with_http_info(opts)
      data
    end

    # Get current order
    # Retrieves the user&#39;s current order.
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderBig, Integer, Hash)>] OrderBig data, response status code and response headers
    def get_current_order_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrdersApi.get_current_order ...'
      end
      # resource path
      local_var_path = '/orders/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrderBig'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"OrdersApi.get_current_order",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrdersApi#get_current_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get order
    # Retrieves an order.
    # @param number [String] The order number
    # @param [Hash] opts the optional parameters
    # @return [OrderBig]
    def get_order(number, opts = {})
      data, _status_code, _headers = get_order_with_http_info(number, opts)
      data
    end

    # Get order
    # Retrieves an order.
    # @param number [String] The order number
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderBig, Integer, Hash)>] OrderBig data, response status code and response headers
    def get_order_with_http_info(number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrdersApi.get_order ...'
      end
      # verify the required parameter 'number' is set
      if @api_client.config.client_side_validation && number.nil?
        fail ArgumentError, "Missing the required parameter 'number' when calling OrdersApi.get_order"
      end
      # resource path
      local_var_path = '/orders/{number}'.sub('{' + 'number' + '}', CGI.escape(number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrderBig'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'order-token']

      new_options = opts.merge(
        :operation => :"OrdersApi.get_order",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrdersApi#get_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List orders
    # Lists all orders.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 1)
    # @option opts [Integer] :per_page  (default to 25)
    # @option opts [Object] :q Allows to query results based on search filters provided by Ransack (https://github.com/activerecord-hackery/ransack/).
    # @return [ListUserOrders200Response]
    def list_orders(opts = {})
      data, _status_code, _headers = list_orders_with_http_info(opts)
      data
    end

    # List orders
    # Lists all orders.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 1)
    # @option opts [Integer] :per_page  (default to 25)
    # @option opts [Object] :q Allows to query results based on search filters provided by Ransack (https://github.com/activerecord-hackery/ransack/).
    # @return [Array<(ListUserOrders200Response, Integer, Hash)>] ListUserOrders200Response data, response status code and response headers
    def list_orders_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrdersApi.list_orders ...'
      end
      # resource path
      local_var_path = '/orders'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListUserOrders200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"OrdersApi.list_orders",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrdersApi#list_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List user's orders
    # Lists the orders that belong to the current user.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 1)
    # @option opts [Integer] :per_page  (default to 25)
    # @option opts [Object] :q Allows to query results based on search filters provided by Ransack (https://github.com/activerecord-hackery/ransack/).
    # @return [ListUserOrders200Response]
    def list_user_orders(opts = {})
      data, _status_code, _headers = list_user_orders_with_http_info(opts)
      data
    end

    # List user&#39;s orders
    # Lists the orders that belong to the current user.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 1)
    # @option opts [Integer] :per_page  (default to 25)
    # @option opts [Object] :q Allows to query results based on search filters provided by Ransack (https://github.com/activerecord-hackery/ransack/).
    # @return [Array<(ListUserOrders200Response, Integer, Hash)>] ListUserOrders200Response data, response status code and response headers
    def list_user_orders_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrdersApi.list_user_orders ...'
      end
      # resource path
      local_var_path = '/orders/mine'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListUserOrders200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"OrdersApi.list_user_orders",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrdersApi#list_user_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update order
    # Updates an order.  To perform this operation the request should be made as the order's owner or with the order token in case of unauthenitcated checkouts (es. guest checkout).
    # @param number [String] The order number
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateOrderRequest] :update_order_request 
    # @return [OrderBig]
    def update_order(number, opts = {})
      data, _status_code, _headers = update_order_with_http_info(number, opts)
      data
    end

    # Update order
    # Updates an order.  To perform this operation the request should be made as the order&#39;s owner or with the order token in case of unauthenitcated checkouts (es. guest checkout).
    # @param number [String] The order number
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateOrderRequest] :update_order_request 
    # @return [Array<(OrderBig, Integer, Hash)>] OrderBig data, response status code and response headers
    def update_order_with_http_info(number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrdersApi.update_order ...'
      end
      # verify the required parameter 'number' is set
      if @api_client.config.client_side_validation && number.nil?
        fail ArgumentError, "Missing the required parameter 'number' when calling OrdersApi.update_order"
      end
      # resource path
      local_var_path = '/orders/{number}'.sub('{' + 'number' + '}', CGI.escape(number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_order_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'OrderBig'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'order-token']

      new_options = opts.merge(
        :operation => :"OrdersApi.update_order",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrdersApi#update_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
