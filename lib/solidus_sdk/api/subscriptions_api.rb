=begin
#solidus_subscriptions

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0-SNAPSHOT

=end

require 'cgi'

module SolidusSdk
  class SubscriptionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Update Subscription
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [PatchSubscriptionsApiV1SubscriptionsIdRequest] :patch_subscriptions_api_v1_subscriptions_id_request 
    # @return [PatchSubscriptionsApiV1SubscriptionsId200Response]
    def patch_subscriptions_api_v1_subscriptions_id(id, opts = {})
      data, _status_code, _headers = patch_subscriptions_api_v1_subscriptions_id_with_http_info(id, opts)
      data
    end

    # Update Subscription
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [PatchSubscriptionsApiV1SubscriptionsIdRequest] :patch_subscriptions_api_v1_subscriptions_id_request 
    # @return [Array<(PatchSubscriptionsApiV1SubscriptionsId200Response, Integer, Hash)>] PatchSubscriptionsApiV1SubscriptionsId200Response data, response status code and response headers
    def patch_subscriptions_api_v1_subscriptions_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriptionsApi.patch_subscriptions_api_v1_subscriptions_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SubscriptionsApi.patch_subscriptions_api_v1_subscriptions_id"
      end
      # resource path
      local_var_path = '/subscriptions/api/v1/subscriptions/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'patch_subscriptions_api_v1_subscriptions_id_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PatchSubscriptionsApiV1SubscriptionsId200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SubscriptionsApi.patch_subscriptions_api_v1_subscriptions_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#patch_subscriptions_api_v1_subscriptions_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Activate Subscription
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [SubscriptionOutput]
    def post_subscriptions_api_v1_subscriptions_id_activate(id, opts = {})
      data, _status_code, _headers = post_subscriptions_api_v1_subscriptions_id_activate_with_http_info(id, opts)
      data
    end

    # Activate Subscription
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubscriptionOutput, Integer, Hash)>] SubscriptionOutput data, response status code and response headers
    def post_subscriptions_api_v1_subscriptions_id_activate_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriptionsApi.post_subscriptions_api_v1_subscriptions_id_activate ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SubscriptionsApi.post_subscriptions_api_v1_subscriptions_id_activate"
      end
      # resource path
      local_var_path = '/subscriptions/api/v1/subscriptions/{id}/activate'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SubscriptionOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SubscriptionsApi.post_subscriptions_api_v1_subscriptions_id_activate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#post_subscriptions_api_v1_subscriptions_id_activate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel Subscription
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [SubscriptionOutput]
    def post_subscriptions_api_v1_subscriptions_id_cancel(id, opts = {})
      data, _status_code, _headers = post_subscriptions_api_v1_subscriptions_id_cancel_with_http_info(id, opts)
      data
    end

    # Cancel Subscription
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubscriptionOutput, Integer, Hash)>] SubscriptionOutput data, response status code and response headers
    def post_subscriptions_api_v1_subscriptions_id_cancel_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriptionsApi.post_subscriptions_api_v1_subscriptions_id_cancel ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SubscriptionsApi.post_subscriptions_api_v1_subscriptions_id_cancel"
      end
      # resource path
      local_var_path = '/subscriptions/api/v1/subscriptions/{id}/cancel'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SubscriptionOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SubscriptionsApi.post_subscriptions_api_v1_subscriptions_id_cancel",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#post_subscriptions_api_v1_subscriptions_id_cancel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Skip Subscription
    # @param [Hash] opts the optional parameters
    # @return [SubscriptionOutput]
    def post_subscriptions_api_v1_subscriptions_id_skip(opts = {})
      data, _status_code, _headers = post_subscriptions_api_v1_subscriptions_id_skip_with_http_info(opts)
      data
    end

    # Skip Subscription
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubscriptionOutput, Integer, Hash)>] SubscriptionOutput data, response status code and response headers
    def post_subscriptions_api_v1_subscriptions_id_skip_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriptionsApi.post_subscriptions_api_v1_subscriptions_id_skip ...'
      end
      # resource path
      local_var_path = '/subscriptions/api/v1/subscriptions/:id/skip'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SubscriptionOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SubscriptionsApi.post_subscriptions_api_v1_subscriptions_id_skip",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#post_subscriptions_api_v1_subscriptions_id_skip\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
