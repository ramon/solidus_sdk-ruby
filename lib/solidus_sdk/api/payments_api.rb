=begin
#Solidus API

#The standard Solidus API.

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0-SNAPSHOT

=end

require 'cgi'

module SolidusSdk
  class PaymentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Authorize checkout payment
    # Authorizes a checkout's payment.
    # @param checkout_id [String] The order number
    # @param payment_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Payment]
    def authorize_checkout_payment(checkout_id, payment_id, opts = {})
      data, _status_code, _headers = authorize_checkout_payment_with_http_info(checkout_id, payment_id, opts)
      data
    end

    # Authorize checkout payment
    # Authorizes a checkout&#39;s payment.
    # @param checkout_id [String] The order number
    # @param payment_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Payment, Integer, Hash)>] Payment data, response status code and response headers
    def authorize_checkout_payment_with_http_info(checkout_id, payment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentsApi.authorize_checkout_payment ...'
      end
      # verify the required parameter 'checkout_id' is set
      if @api_client.config.client_side_validation && checkout_id.nil?
        fail ArgumentError, "Missing the required parameter 'checkout_id' when calling PaymentsApi.authorize_checkout_payment"
      end
      # verify the required parameter 'payment_id' is set
      if @api_client.config.client_side_validation && payment_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_id' when calling PaymentsApi.authorize_checkout_payment"
      end
      # resource path
      local_var_path = '/checkouts/{checkout_id}/payments/{payment_id}/authorize'.sub('{' + 'checkout_id' + '}', CGI.escape(checkout_id.to_s)).sub('{' + 'payment_id' + '}', CGI.escape(payment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Payment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"PaymentsApi.authorize_checkout_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#authorize_checkout_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Authorize order payment
    # Authorizes an order's payment.
    # @param order_number [String] 
    # @param payment_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Payment]
    def authorize_order_payment(order_number, payment_id, opts = {})
      data, _status_code, _headers = authorize_order_payment_with_http_info(order_number, payment_id, opts)
      data
    end

    # Authorize order payment
    # Authorizes an order&#39;s payment.
    # @param order_number [String] 
    # @param payment_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Payment, Integer, Hash)>] Payment data, response status code and response headers
    def authorize_order_payment_with_http_info(order_number, payment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentsApi.authorize_order_payment ...'
      end
      # verify the required parameter 'order_number' is set
      if @api_client.config.client_side_validation && order_number.nil?
        fail ArgumentError, "Missing the required parameter 'order_number' when calling PaymentsApi.authorize_order_payment"
      end
      # verify the required parameter 'payment_id' is set
      if @api_client.config.client_side_validation && payment_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_id' when calling PaymentsApi.authorize_order_payment"
      end
      # resource path
      local_var_path = '/orders/{order_number}/payments/{payment_id}/authorize'.sub('{' + 'order_number' + '}', CGI.escape(order_number.to_s)).sub('{' + 'payment_id' + '}', CGI.escape(payment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Payment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"PaymentsApi.authorize_order_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#authorize_order_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Capture checkout payment
    # Captures a checkout's payment.
    # @param checkout_id [String] The order number
    # @param payment_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Payment]
    def capture_checkout_payment(checkout_id, payment_id, opts = {})
      data, _status_code, _headers = capture_checkout_payment_with_http_info(checkout_id, payment_id, opts)
      data
    end

    # Capture checkout payment
    # Captures a checkout&#39;s payment.
    # @param checkout_id [String] The order number
    # @param payment_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Payment, Integer, Hash)>] Payment data, response status code and response headers
    def capture_checkout_payment_with_http_info(checkout_id, payment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentsApi.capture_checkout_payment ...'
      end
      # verify the required parameter 'checkout_id' is set
      if @api_client.config.client_side_validation && checkout_id.nil?
        fail ArgumentError, "Missing the required parameter 'checkout_id' when calling PaymentsApi.capture_checkout_payment"
      end
      # verify the required parameter 'payment_id' is set
      if @api_client.config.client_side_validation && payment_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_id' when calling PaymentsApi.capture_checkout_payment"
      end
      # resource path
      local_var_path = '/checkouts/{checkout_id}/payments/{payment_id}/capture'.sub('{' + 'checkout_id' + '}', CGI.escape(checkout_id.to_s)).sub('{' + 'payment_id' + '}', CGI.escape(payment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Payment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"PaymentsApi.capture_checkout_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#capture_checkout_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Capture order payment
    # Captures an order's payment.
    # @param order_number [String] 
    # @param payment_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Payment]
    def capture_order_payment(order_number, payment_id, opts = {})
      data, _status_code, _headers = capture_order_payment_with_http_info(order_number, payment_id, opts)
      data
    end

    # Capture order payment
    # Captures an order&#39;s payment.
    # @param order_number [String] 
    # @param payment_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Payment, Integer, Hash)>] Payment data, response status code and response headers
    def capture_order_payment_with_http_info(order_number, payment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentsApi.capture_order_payment ...'
      end
      # verify the required parameter 'order_number' is set
      if @api_client.config.client_side_validation && order_number.nil?
        fail ArgumentError, "Missing the required parameter 'order_number' when calling PaymentsApi.capture_order_payment"
      end
      # verify the required parameter 'payment_id' is set
      if @api_client.config.client_side_validation && payment_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_id' when calling PaymentsApi.capture_order_payment"
      end
      # resource path
      local_var_path = '/orders/{order_number}/payments/{payment_id}/capture'.sub('{' + 'order_number' + '}', CGI.escape(order_number.to_s)).sub('{' + 'payment_id' + '}', CGI.escape(payment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Payment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"PaymentsApi.capture_order_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#capture_order_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create checkout payment
    # Creates a new payment for a checkout. Only the checkout's owner and users that can create a payment (eg. users with admin role) are allowed to perform this action.
    # @param checkout_id [String] The order number
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCheckoutPaymentRequest] :create_checkout_payment_request This requests only accepts available Payment Methods in the &#x60;payment_method_id&#x60; field.  The Payment Methods available to users for creating a new payment are the ones with both attributes &#x60;available_to_users&#x60; and &#x60;active&#x60; set to &#x60;true&#x60;.
    # @return [Payment]
    def create_checkout_payment(checkout_id, opts = {})
      data, _status_code, _headers = create_checkout_payment_with_http_info(checkout_id, opts)
      data
    end

    # Create checkout payment
    # Creates a new payment for a checkout. Only the checkout&#39;s owner and users that can create a payment (eg. users with admin role) are allowed to perform this action.
    # @param checkout_id [String] The order number
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCheckoutPaymentRequest] :create_checkout_payment_request This requests only accepts available Payment Methods in the &#x60;payment_method_id&#x60; field.  The Payment Methods available to users for creating a new payment are the ones with both attributes &#x60;available_to_users&#x60; and &#x60;active&#x60; set to &#x60;true&#x60;.
    # @return [Array<(Payment, Integer, Hash)>] Payment data, response status code and response headers
    def create_checkout_payment_with_http_info(checkout_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentsApi.create_checkout_payment ...'
      end
      # verify the required parameter 'checkout_id' is set
      if @api_client.config.client_side_validation && checkout_id.nil?
        fail ArgumentError, "Missing the required parameter 'checkout_id' when calling PaymentsApi.create_checkout_payment"
      end
      # resource path
      local_var_path = '/checkouts/{checkout_id}/payments'.sub('{' + 'checkout_id' + '}', CGI.escape(checkout_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_checkout_payment_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Payment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'order-token']

      new_options = opts.merge(
        :operation => :"PaymentsApi.create_checkout_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#create_checkout_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create order payment
    # Creates a new payment for a checkout. Only the order's owner and users that can create a payment (eg. users with admin role) are allowed to perform this action.
    # @param order_number [String] The order number
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCheckoutPaymentRequest] :create_checkout_payment_request This requests only accepts available Payment Methods in the &#x60;payment_method_id&#x60; field.  The Payment Methods available to users for creating a new payment are the ones with both attributes &#x60;available_to_users&#x60; and &#x60;active&#x60; set to &#x60;true&#x60;.
    # @return [Payment]
    def create_order_payment(order_number, opts = {})
      data, _status_code, _headers = create_order_payment_with_http_info(order_number, opts)
      data
    end

    # Create order payment
    # Creates a new payment for a checkout. Only the order&#39;s owner and users that can create a payment (eg. users with admin role) are allowed to perform this action.
    # @param order_number [String] The order number
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCheckoutPaymentRequest] :create_checkout_payment_request This requests only accepts available Payment Methods in the &#x60;payment_method_id&#x60; field.  The Payment Methods available to users for creating a new payment are the ones with both attributes &#x60;available_to_users&#x60; and &#x60;active&#x60; set to &#x60;true&#x60;.
    # @return [Array<(Payment, Integer, Hash)>] Payment data, response status code and response headers
    def create_order_payment_with_http_info(order_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentsApi.create_order_payment ...'
      end
      # verify the required parameter 'order_number' is set
      if @api_client.config.client_side_validation && order_number.nil?
        fail ArgumentError, "Missing the required parameter 'order_number' when calling PaymentsApi.create_order_payment"
      end
      # resource path
      local_var_path = '/orders/{order_number}/payments'.sub('{' + 'order_number' + '}', CGI.escape(order_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_checkout_payment_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Payment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'order-token']

      new_options = opts.merge(
        :operation => :"PaymentsApi.create_order_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#create_order_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Credit checkout payment
    # Credits a checkout's payment.
    # @param checkout_id [String] The order number
    # @param payment_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Payment]
    def credit_checkout_payment(checkout_id, payment_id, opts = {})
      data, _status_code, _headers = credit_checkout_payment_with_http_info(checkout_id, payment_id, opts)
      data
    end

    # Credit checkout payment
    # Credits a checkout&#39;s payment.
    # @param checkout_id [String] The order number
    # @param payment_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Payment, Integer, Hash)>] Payment data, response status code and response headers
    def credit_checkout_payment_with_http_info(checkout_id, payment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentsApi.credit_checkout_payment ...'
      end
      # verify the required parameter 'checkout_id' is set
      if @api_client.config.client_side_validation && checkout_id.nil?
        fail ArgumentError, "Missing the required parameter 'checkout_id' when calling PaymentsApi.credit_checkout_payment"
      end
      # verify the required parameter 'payment_id' is set
      if @api_client.config.client_side_validation && payment_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_id' when calling PaymentsApi.credit_checkout_payment"
      end
      # resource path
      local_var_path = '/checkouts/{checkout_id}/payments/{payment_id}/credit'.sub('{' + 'checkout_id' + '}', CGI.escape(checkout_id.to_s)).sub('{' + 'payment_id' + '}', CGI.escape(payment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Payment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"PaymentsApi.credit_checkout_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#credit_checkout_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Credit order payment
    # Credits an order's payment.
    # @param order_number [String] 
    # @param payment_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Payment]
    def credit_order_payment(order_number, payment_id, opts = {})
      data, _status_code, _headers = credit_order_payment_with_http_info(order_number, payment_id, opts)
      data
    end

    # Credit order payment
    # Credits an order&#39;s payment.
    # @param order_number [String] 
    # @param payment_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Payment, Integer, Hash)>] Payment data, response status code and response headers
    def credit_order_payment_with_http_info(order_number, payment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentsApi.credit_order_payment ...'
      end
      # verify the required parameter 'order_number' is set
      if @api_client.config.client_side_validation && order_number.nil?
        fail ArgumentError, "Missing the required parameter 'order_number' when calling PaymentsApi.credit_order_payment"
      end
      # verify the required parameter 'payment_id' is set
      if @api_client.config.client_side_validation && payment_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_id' when calling PaymentsApi.credit_order_payment"
      end
      # resource path
      local_var_path = '/orders/{order_number}/payments/{payment_id}/credit'.sub('{' + 'order_number' + '}', CGI.escape(order_number.to_s)).sub('{' + 'payment_id' + '}', CGI.escape(payment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Payment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"PaymentsApi.credit_order_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#credit_order_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get checkout payment
    # Gets a checkout's payment.
    # @param checkout_id [String] The order number
    # @param id [String] The payment id
    # @param [Hash] opts the optional parameters
    # @return [Payment]
    def get_checkout_payment(checkout_id, id, opts = {})
      data, _status_code, _headers = get_checkout_payment_with_http_info(checkout_id, id, opts)
      data
    end

    # Get checkout payment
    # Gets a checkout&#39;s payment.
    # @param checkout_id [String] The order number
    # @param id [String] The payment id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Payment, Integer, Hash)>] Payment data, response status code and response headers
    def get_checkout_payment_with_http_info(checkout_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentsApi.get_checkout_payment ...'
      end
      # verify the required parameter 'checkout_id' is set
      if @api_client.config.client_side_validation && checkout_id.nil?
        fail ArgumentError, "Missing the required parameter 'checkout_id' when calling PaymentsApi.get_checkout_payment"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PaymentsApi.get_checkout_payment"
      end
      # resource path
      local_var_path = '/checkouts/{checkout_id}/payments/{id}'.sub('{' + 'checkout_id' + '}', CGI.escape(checkout_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Payment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'order-token']

      new_options = opts.merge(
        :operation => :"PaymentsApi.get_checkout_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#get_checkout_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get order payment
    # Retrieves an orer's payment.
    # @param order_number [String] 
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_order_payment(order_number, id, opts = {})
      data, _status_code, _headers = get_order_payment_with_http_info(order_number, id, opts)
      data
    end

    # Get order payment
    # Retrieves an orer&#39;s payment.
    # @param order_number [String] 
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_order_payment_with_http_info(order_number, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentsApi.get_order_payment ...'
      end
      # verify the required parameter 'order_number' is set
      if @api_client.config.client_side_validation && order_number.nil?
        fail ArgumentError, "Missing the required parameter 'order_number' when calling PaymentsApi.get_order_payment"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PaymentsApi.get_order_payment"
      end
      # resource path
      local_var_path = '/orders/{order_number}/payments/{id}'.sub('{' + 'order_number' + '}', CGI.escape(order_number.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'order-token']

      new_options = opts.merge(
        :operation => :"PaymentsApi.get_order_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#get_order_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List checkout payments
    # Lists a checkout's payments. The list of payments is only visible by the checkout's owner and by users authorized to see the order, eg. users with admin role. 
    # @param checkout_id [String] The order number
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 1)
    # @option opts [Integer] :per_page  (default to 25)
    # @option opts [Object] :q Allows to query results based on search filters provided by Ransack (https://github.com/activerecord-hackery/ransack/).
    # @return [ListCheckoutPayments200Response]
    def list_checkout_payments(checkout_id, opts = {})
      data, _status_code, _headers = list_checkout_payments_with_http_info(checkout_id, opts)
      data
    end

    # List checkout payments
    # Lists a checkout&#39;s payments. The list of payments is only visible by the checkout&#39;s owner and by users authorized to see the order, eg. users with admin role. 
    # @param checkout_id [String] The order number
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 1)
    # @option opts [Integer] :per_page  (default to 25)
    # @option opts [Object] :q Allows to query results based on search filters provided by Ransack (https://github.com/activerecord-hackery/ransack/).
    # @return [Array<(ListCheckoutPayments200Response, Integer, Hash)>] ListCheckoutPayments200Response data, response status code and response headers
    def list_checkout_payments_with_http_info(checkout_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentsApi.list_checkout_payments ...'
      end
      # verify the required parameter 'checkout_id' is set
      if @api_client.config.client_side_validation && checkout_id.nil?
        fail ArgumentError, "Missing the required parameter 'checkout_id' when calling PaymentsApi.list_checkout_payments"
      end
      # resource path
      local_var_path = '/checkouts/{checkout_id}/payments'.sub('{' + 'checkout_id' + '}', CGI.escape(checkout_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListCheckoutPayments200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"PaymentsApi.list_checkout_payments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#list_checkout_payments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List order payments
    # Lists an order's payments.
    # @param order_number [String] The order number
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 1)
    # @option opts [Integer] :per_page  (default to 25)
    # @option opts [Object] :q Allows to query results based on search filters provided by Ransack (https://github.com/activerecord-hackery/ransack/).
    # @return [ListCheckoutPayments200Response]
    def list_order_payments(order_number, opts = {})
      data, _status_code, _headers = list_order_payments_with_http_info(order_number, opts)
      data
    end

    # List order payments
    # Lists an order&#39;s payments.
    # @param order_number [String] The order number
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 1)
    # @option opts [Integer] :per_page  (default to 25)
    # @option opts [Object] :q Allows to query results based on search filters provided by Ransack (https://github.com/activerecord-hackery/ransack/).
    # @return [Array<(ListCheckoutPayments200Response, Integer, Hash)>] ListCheckoutPayments200Response data, response status code and response headers
    def list_order_payments_with_http_info(order_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentsApi.list_order_payments ...'
      end
      # verify the required parameter 'order_number' is set
      if @api_client.config.client_side_validation && order_number.nil?
        fail ArgumentError, "Missing the required parameter 'order_number' when calling PaymentsApi.list_order_payments"
      end
      # resource path
      local_var_path = '/orders/{order_number}/payments'.sub('{' + 'order_number' + '}', CGI.escape(order_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListCheckoutPayments200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'order-token']

      new_options = opts.merge(
        :operation => :"PaymentsApi.list_order_payments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#list_order_payments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Purchase checkout payment
    # Purchases a checkout's payment.
    # @param checkout_id [String] The order number
    # @param payment_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Payment]
    def purchase_checkout_payment(checkout_id, payment_id, opts = {})
      data, _status_code, _headers = purchase_checkout_payment_with_http_info(checkout_id, payment_id, opts)
      data
    end

    # Purchase checkout payment
    # Purchases a checkout&#39;s payment.
    # @param checkout_id [String] The order number
    # @param payment_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Payment, Integer, Hash)>] Payment data, response status code and response headers
    def purchase_checkout_payment_with_http_info(checkout_id, payment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentsApi.purchase_checkout_payment ...'
      end
      # verify the required parameter 'checkout_id' is set
      if @api_client.config.client_side_validation && checkout_id.nil?
        fail ArgumentError, "Missing the required parameter 'checkout_id' when calling PaymentsApi.purchase_checkout_payment"
      end
      # verify the required parameter 'payment_id' is set
      if @api_client.config.client_side_validation && payment_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_id' when calling PaymentsApi.purchase_checkout_payment"
      end
      # resource path
      local_var_path = '/checkouts/{checkout_id}/payments/{payment_id}/purchase'.sub('{' + 'checkout_id' + '}', CGI.escape(checkout_id.to_s)).sub('{' + 'payment_id' + '}', CGI.escape(payment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Payment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"PaymentsApi.purchase_checkout_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#purchase_checkout_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Purchase order payment
    # Purchases an order's payment.
    # @param order_number [String] 
    # @param payment_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Payment]
    def purchase_order_payment(order_number, payment_id, opts = {})
      data, _status_code, _headers = purchase_order_payment_with_http_info(order_number, payment_id, opts)
      data
    end

    # Purchase order payment
    # Purchases an order&#39;s payment.
    # @param order_number [String] 
    # @param payment_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Payment, Integer, Hash)>] Payment data, response status code and response headers
    def purchase_order_payment_with_http_info(order_number, payment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentsApi.purchase_order_payment ...'
      end
      # verify the required parameter 'order_number' is set
      if @api_client.config.client_side_validation && order_number.nil?
        fail ArgumentError, "Missing the required parameter 'order_number' when calling PaymentsApi.purchase_order_payment"
      end
      # verify the required parameter 'payment_id' is set
      if @api_client.config.client_side_validation && payment_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_id' when calling PaymentsApi.purchase_order_payment"
      end
      # resource path
      local_var_path = '/orders/{order_number}/payments/{payment_id}/purchase'.sub('{' + 'order_number' + '}', CGI.escape(order_number.to_s)).sub('{' + 'payment_id' + '}', CGI.escape(payment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Payment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"PaymentsApi.purchase_order_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#purchase_order_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update checkout payment
    # Updates a checkout's payment. Please note that this action can be done by users with the admin permissions on Payments (eg. users with the admin role). Only pending payment can be updated. 
    # @param checkout_id [String] The order number
    # @param id [String] The payment id
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCheckoutPaymentRequest] :create_checkout_payment_request 
    # @return [Payment]
    def update_checkout_payment(checkout_id, id, opts = {})
      data, _status_code, _headers = update_checkout_payment_with_http_info(checkout_id, id, opts)
      data
    end

    # Update checkout payment
    # Updates a checkout&#39;s payment. Please note that this action can be done by users with the admin permissions on Payments (eg. users with the admin role). Only pending payment can be updated. 
    # @param checkout_id [String] The order number
    # @param id [String] The payment id
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCheckoutPaymentRequest] :create_checkout_payment_request 
    # @return [Array<(Payment, Integer, Hash)>] Payment data, response status code and response headers
    def update_checkout_payment_with_http_info(checkout_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentsApi.update_checkout_payment ...'
      end
      # verify the required parameter 'checkout_id' is set
      if @api_client.config.client_side_validation && checkout_id.nil?
        fail ArgumentError, "Missing the required parameter 'checkout_id' when calling PaymentsApi.update_checkout_payment"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PaymentsApi.update_checkout_payment"
      end
      # resource path
      local_var_path = '/checkouts/{checkout_id}/payments/{id}'.sub('{' + 'checkout_id' + '}', CGI.escape(checkout_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_checkout_payment_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Payment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'order-token']

      new_options = opts.merge(
        :operation => :"PaymentsApi.update_checkout_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#update_checkout_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update order payment
    # Updates a checkout's payment. Please note that this action can be done by users with the admin permissions on Payments (eg. users with the admin role). Only pending payment can be updated. 
    # @param order_number [String] 
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCheckoutPaymentRequest] :create_checkout_payment_request 
    # @return [Payment]
    def update_order_payment(order_number, id, opts = {})
      data, _status_code, _headers = update_order_payment_with_http_info(order_number, id, opts)
      data
    end

    # Update order payment
    # Updates a checkout&#39;s payment. Please note that this action can be done by users with the admin permissions on Payments (eg. users with the admin role). Only pending payment can be updated. 
    # @param order_number [String] 
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCheckoutPaymentRequest] :create_checkout_payment_request 
    # @return [Array<(Payment, Integer, Hash)>] Payment data, response status code and response headers
    def update_order_payment_with_http_info(order_number, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentsApi.update_order_payment ...'
      end
      # verify the required parameter 'order_number' is set
      if @api_client.config.client_side_validation && order_number.nil?
        fail ArgumentError, "Missing the required parameter 'order_number' when calling PaymentsApi.update_order_payment"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PaymentsApi.update_order_payment"
      end
      # resource path
      local_var_path = '/orders/{order_number}/payments/{id}'.sub('{' + 'order_number' + '}', CGI.escape(order_number.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_checkout_payment_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Payment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'order-token']

      new_options = opts.merge(
        :operation => :"PaymentsApi.update_order_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#update_order_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Void checkout payment
    # Voids a checkout's payment.
    # @param checkout_id [String] The order number
    # @param payment_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Payment]
    def void_checkout_payment(checkout_id, payment_id, opts = {})
      data, _status_code, _headers = void_checkout_payment_with_http_info(checkout_id, payment_id, opts)
      data
    end

    # Void checkout payment
    # Voids a checkout&#39;s payment.
    # @param checkout_id [String] The order number
    # @param payment_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Payment, Integer, Hash)>] Payment data, response status code and response headers
    def void_checkout_payment_with_http_info(checkout_id, payment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentsApi.void_checkout_payment ...'
      end
      # verify the required parameter 'checkout_id' is set
      if @api_client.config.client_side_validation && checkout_id.nil?
        fail ArgumentError, "Missing the required parameter 'checkout_id' when calling PaymentsApi.void_checkout_payment"
      end
      # verify the required parameter 'payment_id' is set
      if @api_client.config.client_side_validation && payment_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_id' when calling PaymentsApi.void_checkout_payment"
      end
      # resource path
      local_var_path = '/checkouts/{checkout_id}/payments/{payment_id}/void'.sub('{' + 'checkout_id' + '}', CGI.escape(checkout_id.to_s)).sub('{' + 'payment_id' + '}', CGI.escape(payment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Payment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"PaymentsApi.void_checkout_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#void_checkout_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Void order payment
    # Voids an order's payment.
    # @param order_number [String] 
    # @param payment_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Payment]
    def void_order_payment(order_number, payment_id, opts = {})
      data, _status_code, _headers = void_order_payment_with_http_info(order_number, payment_id, opts)
      data
    end

    # Void order payment
    # Voids an order&#39;s payment.
    # @param order_number [String] 
    # @param payment_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Payment, Integer, Hash)>] Payment data, response status code and response headers
    def void_order_payment_with_http_info(order_number, payment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentsApi.void_order_payment ...'
      end
      # verify the required parameter 'order_number' is set
      if @api_client.config.client_side_validation && order_number.nil?
        fail ArgumentError, "Missing the required parameter 'order_number' when calling PaymentsApi.void_order_payment"
      end
      # verify the required parameter 'payment_id' is set
      if @api_client.config.client_side_validation && payment_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_id' when calling PaymentsApi.void_order_payment"
      end
      # resource path
      local_var_path = '/orders/{order_number}/payments/{payment_id}/void'.sub('{' + 'order_number' + '}', CGI.escape(order_number.to_s)).sub('{' + 'payment_id' + '}', CGI.escape(payment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Payment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key']

      new_options = opts.merge(
        :operation => :"PaymentsApi.void_order_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#void_order_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
