=begin
#Solidus API

#The standard Solidus API.

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0-SNAPSHOT

=end

require 'date'
require 'time'

module SolidusSdk
  # This field is required for Payment Method that has source_required? returning true.
  class PaymentInputSourceAttributes
    attr_accessor :number

    attr_accessor :month

    attr_accessor :year

    attr_accessor :verification_value

    attr_accessor :first_name

    attr_accessor :last_name

    attr_accessor :cc_type

    attr_accessor :gateway_customer_profile_id

    attr_accessor :gateway_payment_profile_id

    attr_accessor :last_digits

    attr_accessor :name

    attr_accessor :encrypted_data

    attr_accessor :wallet_payment_source_id

    attr_accessor :address_attributes

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'number' => :'number',
        :'month' => :'month',
        :'year' => :'year',
        :'verification_value' => :'verification_value',
        :'first_name' => :'first_name',
        :'last_name' => :'last_name',
        :'cc_type' => :'cc_type',
        :'gateway_customer_profile_id' => :'gateway_customer_profile_id',
        :'gateway_payment_profile_id' => :'gateway_payment_profile_id',
        :'last_digits' => :'last_digits',
        :'name' => :'name',
        :'encrypted_data' => :'encrypted_data',
        :'wallet_payment_source_id' => :'wallet_payment_source_id',
        :'address_attributes' => :'address_attributes'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'number' => :'String',
        :'month' => :'Integer',
        :'year' => :'Integer',
        :'verification_value' => :'String',
        :'first_name' => :'String',
        :'last_name' => :'String',
        :'cc_type' => :'String',
        :'gateway_customer_profile_id' => :'String',
        :'gateway_payment_profile_id' => :'String',
        :'last_digits' => :'String',
        :'name' => :'String',
        :'encrypted_data' => :'String',
        :'wallet_payment_source_id' => :'Integer',
        :'address_attributes' => :'AddressInput'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SolidusSdk::PaymentInputSourceAttributes` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SolidusSdk::PaymentInputSourceAttributes`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'number')
        self.number = attributes[:'number']
      end

      if attributes.key?(:'month')
        self.month = attributes[:'month']
      end

      if attributes.key?(:'year')
        self.year = attributes[:'year']
      end

      if attributes.key?(:'verification_value')
        self.verification_value = attributes[:'verification_value']
      end

      if attributes.key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.key?(:'cc_type')
        self.cc_type = attributes[:'cc_type']
      end

      if attributes.key?(:'gateway_customer_profile_id')
        self.gateway_customer_profile_id = attributes[:'gateway_customer_profile_id']
      end

      if attributes.key?(:'gateway_payment_profile_id')
        self.gateway_payment_profile_id = attributes[:'gateway_payment_profile_id']
      end

      if attributes.key?(:'last_digits')
        self.last_digits = attributes[:'last_digits']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'encrypted_data')
        self.encrypted_data = attributes[:'encrypted_data']
      end

      if attributes.key?(:'wallet_payment_source_id')
        self.wallet_payment_source_id = attributes[:'wallet_payment_source_id']
      end

      if attributes.key?(:'address_attributes')
        self.address_attributes = attributes[:'address_attributes']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          number == o.number &&
          month == o.month &&
          year == o.year &&
          verification_value == o.verification_value &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          cc_type == o.cc_type &&
          gateway_customer_profile_id == o.gateway_customer_profile_id &&
          gateway_payment_profile_id == o.gateway_payment_profile_id &&
          last_digits == o.last_digits &&
          name == o.name &&
          encrypted_data == o.encrypted_data &&
          wallet_payment_source_id == o.wallet_payment_source_id &&
          address_attributes == o.address_attributes
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [number, month, year, verification_value, first_name, last_name, cc_type, gateway_customer_profile_id, gateway_payment_profile_id, last_digits, name, encrypted_data, wallet_payment_source_id, address_attributes].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = SolidusSdk.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
