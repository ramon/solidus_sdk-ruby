=begin
#Solidus API

#The standard Solidus API.

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0-SNAPSHOT

=end

require 'date'
require 'time'

module SolidusSdk
  class ProductInput
    attr_accessor :name

    attr_accessor :description

    attr_accessor :available_on

    attr_accessor :meta_description

    attr_accessor :meta_keywords

    attr_accessor :price

    attr_accessor :sku

    attr_accessor :deleted_at

    attr_accessor :option_values_hash

    attr_accessor :weight

    attr_accessor :height

    attr_accessor :width

    attr_accessor :depth

    attr_accessor :shipping_category_id

    attr_accessor :tax_category_id

    # Comma separated list of taxon ids. Eg. \"1,2\"
    attr_accessor :taxon_ids

    # Comma separated list of option type ids ids. Eg. \"1,2\"
    attr_accessor :option_type_ids

    attr_accessor :cost_currency

    attr_accessor :cost_price

    attr_accessor :product_properties_attributes

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'description' => :'description',
        :'available_on' => :'available_on',
        :'meta_description' => :'meta_description',
        :'meta_keywords' => :'meta_keywords',
        :'price' => :'price',
        :'sku' => :'sku',
        :'deleted_at' => :'deleted_at',
        :'option_values_hash' => :'option_values_hash',
        :'weight' => :'weight',
        :'height' => :'height',
        :'width' => :'width',
        :'depth' => :'depth',
        :'shipping_category_id' => :'shipping_category_id',
        :'tax_category_id' => :'tax_category_id',
        :'taxon_ids' => :'taxon_ids',
        :'option_type_ids' => :'option_type_ids',
        :'cost_currency' => :'cost_currency',
        :'cost_price' => :'cost_price',
        :'product_properties_attributes' => :'product_properties_attributes'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'name' => :'String',
        :'description' => :'String',
        :'available_on' => :'String',
        :'meta_description' => :'String',
        :'meta_keywords' => :'String',
        :'price' => :'String',
        :'sku' => :'String',
        :'deleted_at' => :'String',
        :'option_values_hash' => :'Object',
        :'weight' => :'String',
        :'height' => :'String',
        :'width' => :'String',
        :'depth' => :'String',
        :'shipping_category_id' => :'Integer',
        :'tax_category_id' => :'Integer',
        :'taxon_ids' => :'String',
        :'option_type_ids' => :'String',
        :'cost_currency' => :'String',
        :'cost_price' => :'String',
        :'product_properties_attributes' => :'Array<ProductPropertyInput>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SolidusSdk::ProductInput` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SolidusSdk::ProductInput`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'available_on')
        self.available_on = attributes[:'available_on']
      end

      if attributes.key?(:'meta_description')
        self.meta_description = attributes[:'meta_description']
      end

      if attributes.key?(:'meta_keywords')
        self.meta_keywords = attributes[:'meta_keywords']
      end

      if attributes.key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.key?(:'sku')
        self.sku = attributes[:'sku']
      end

      if attributes.key?(:'deleted_at')
        self.deleted_at = attributes[:'deleted_at']
      end

      if attributes.key?(:'option_values_hash')
        self.option_values_hash = attributes[:'option_values_hash']
      end

      if attributes.key?(:'weight')
        self.weight = attributes[:'weight']
      end

      if attributes.key?(:'height')
        self.height = attributes[:'height']
      end

      if attributes.key?(:'width')
        self.width = attributes[:'width']
      end

      if attributes.key?(:'depth')
        self.depth = attributes[:'depth']
      end

      if attributes.key?(:'shipping_category_id')
        self.shipping_category_id = attributes[:'shipping_category_id']
      end

      if attributes.key?(:'tax_category_id')
        self.tax_category_id = attributes[:'tax_category_id']
      end

      if attributes.key?(:'taxon_ids')
        self.taxon_ids = attributes[:'taxon_ids']
      end

      if attributes.key?(:'option_type_ids')
        self.option_type_ids = attributes[:'option_type_ids']
      end

      if attributes.key?(:'cost_currency')
        self.cost_currency = attributes[:'cost_currency']
      end

      if attributes.key?(:'cost_price')
        self.cost_price = attributes[:'cost_price']
      end

      if attributes.key?(:'product_properties_attributes')
        if (value = attributes[:'product_properties_attributes']).is_a?(Array)
          self.product_properties_attributes = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          description == o.description &&
          available_on == o.available_on &&
          meta_description == o.meta_description &&
          meta_keywords == o.meta_keywords &&
          price == o.price &&
          sku == o.sku &&
          deleted_at == o.deleted_at &&
          option_values_hash == o.option_values_hash &&
          weight == o.weight &&
          height == o.height &&
          width == o.width &&
          depth == o.depth &&
          shipping_category_id == o.shipping_category_id &&
          tax_category_id == o.tax_category_id &&
          taxon_ids == o.taxon_ids &&
          option_type_ids == o.option_type_ids &&
          cost_currency == o.cost_currency &&
          cost_price == o.cost_price &&
          product_properties_attributes == o.product_properties_attributes
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [name, description, available_on, meta_description, meta_keywords, price, sku, deleted_at, option_values_hash, weight, height, width, depth, shipping_category_id, tax_category_id, taxon_ids, option_type_ids, cost_currency, cost_price, product_properties_attributes].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = SolidusSdk.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
